#
# lazy-kq.co - Lazy-KQ interpreter
#
# Copyright (C) 2011 Yousuke Ushiki. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with the
#    distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS''
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

function LazyK(src, stdin)
  # combinator
  S = (x)->(y)->(z)-> x(z)(y(z))
  K = (x)->(y)-> x
  I = -> it

  # lambda calc operator
  cons = (x)->(y)->(f)-> f(x)(y)
  succ = (n)->(f)->(x)-> f(n(f)(x))
  
  # church nums
  cnums = [(f)->(x)-> x]
  for i from 1 to 256
    cnums[i] = succ(cnums[i-1])
  
  # input -> cons
  function input(str)
    car = -> cnums[if str is "" then 256 else str.charCodeAt(0)](it)
    cdr = -> input(str.slice(1))(it)
    cons(car)(cdr)

  # cons -> output
  function output(cns)
    buf = ""
    out = (x)->(y)->
      code = x(-> it + 1)(0)
      if code < 256
        buf := buf + String.fromCharCode(code)
        y(out)
    cns(out)
    buf

  # read unlambda-style code
  function read_unlambda(src)
    src .= replace(/[^\`ski]/g, "")
    if src is "" then return -> it
    read1 = ->
      c = src[0]
      src .:= slice(1)
      switch c
      case \` then read1()(read1())
      case \s then S
      case \k then K
      case \i then I
    read1()
  
  # run
  f = read_unlambda(src)
  output(f(input(stdin)))

function LazyKQ(src, stdin)
  src .= replace(/ﾀﾞｧ/g, \k).replace(/ｼｴﾘ/g, \s).
         replace(/ｲｪｽ/g, \i).replace(/!/g, \`)
  LazyK(src, stdin)

@LazyK  ?= LazyK
@LazyKQ ?= LazyKQ
